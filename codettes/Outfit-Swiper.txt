<--index.html-->
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Outfit Swiper</title>
  <link rel="stylesheet" href="styles.css">
</head>
<body>
  <div id="app">
    <div class="card" id="card-template">
      <img src="" alt="Outfit Image" class="outfit-image">
      <div class="details">
        <p class="description"></p>
        <p class="item-id"></p>         
        <p class="hashtags"></p>
        <p class="price"></p>
        <div class="rating"></div>
      </div>
    </div>
  </div>
  <button id="like-button" class="like-button">‚ù§Ô∏è</button>
  <button id="dislike-button" class="dislike-button">‚ùå</button>
  <script src="scripts.js"></script>
</body>
</html>


//styles.css
 body {
    font-family: Arial, sans-serif;
    display: flex;
    justify-content: center;
    align-items: center;
    height: 100vh;
    background-image: url('images/bg.jpeg');
    background-size: cover;
    background-position: center;
    position: relative;
  }
  
  #app {
    position: relative;
    width: 450px;
    height: 600px;
  }
  
  .like-button,
  .dislike-button {
    border: none;
    background: none;
    font-size: 2.5em;
    cursor: pointer;
    position: absolute;
  }
  
  .like-button {
    right: 30px;
    color: red;
  }
  
  .dislike-button {
    left: 30px;
    color: black;
  }
  
  .card {
    position: absolute;
    width: 100%;
    height: 100%;
    background-color: white;
    border-radius: 10px;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    overflow: hidden;
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: space-between;
    transition: transform 0.5s ease-in-out, opacity 0.5s ease-in-out;
  }
  
  .card img {
    width: 100%;
    height: 65%;
    object-fit: cover;
    transition: transform 0.3s ease-in-out;
  }
  
  .card:hover img {
    transform: scale(1.1);
  }
  
  .details {
    padding: 10px 20px;
    text-align: center;
    box-sizing: border-box;
  }
  
  .description {
    font-size: 1.5em;
    font-weight: bold;
    margin-bottom: 5px;
  }
  
  .item-id {
    font-size: 0.8em;
    color: #888;
    margin-bottom: 5px;
  }
  
  .hashtags {
    color: #888;
    margin-bottom: 5px;
  }
  
  .price {
    margin-bottom: 5px;
  }
  
  .rating {
    display: flex;
    justify-content: center;
    font-size: 1.5em;
    color: gold;
    margin-top: 5px;
  }
  
  .rating span {
    margin: 0 2px;
  }
  
  .card.dragging {
    transition: none;
  }

//scripts.js
 document.addEventListener('DOMContentLoaded', () => {
    const app = document.getElementById('app');
    const cardTemplate = document.getElementById('card-template');
  
    const outfits = [
      {
        id: 'VGT119',
        image: 'images/outfit6.jpg',
        description: 'Square-neck Top',
        hashtags: '#croptop  #casual  #blue  #ü´ê',
        price: '‚Çπ899',
        rating: 4
      },
      {
        id: 'OYRW780',
        image: 'images/outfit7.jpg',
        description: 'Long Satin Skirt',
        hashtags: '#longskirt  #peach  #night  #elegant  #‚ú®üéÄü•Ç',
        price: '‚Çπ1499',
        rating: 5
      },
      {
        id: 'PIU630',
        image: 'images/outfit3.jpg',
        description: 'Corset Olive Skort',
        hashtags: '#corset  #skort  #skirt  #olive',
        price: '‚Çπ1999',
        rating: 3
      },
      {
        id: 'OOT343',
        image: 'images/outfit4.jpg',
        description: 'Cottagecore Short-frock',
        hashtags: '#spring  #frock  #white  #cottagecore  #ü§çü™ª',
        price: '‚Çπ2999',
        rating: 4
      },
      {
        id: 'AO2223',
        image: 'images/outfit5.jpg',
        description: 'Frilled Casual Summer Top',
        hashtags: '#casual  #frilled  #summer',
        price: '‚Çπ999',
        rating: 5
      }
    ];
  
    outfits.forEach((outfit, index) => {
      const card = cardTemplate.cloneNode(true);
      card.id = `card-${index}`;
      card.querySelector('.outfit-image').src = outfit.image;
      card.querySelector('.description').textContent = outfit.description;
      card.querySelector('.item-id').textContent = `ID: ${outfit.id}`;
      card.querySelector('.hashtags').textContent = outfit.hashtags;
      card.querySelector('.price').textContent = outfit.price;
  
      const ratingElement = card.querySelector('.rating');
      ratingElement.innerHTML = '';
      for (let i = 0; i < 5; i++) {
        const star = document.createElement('span');
        star.innerHTML = i < outfit.rating ? '‚òÖ' : '‚òÜ';
        ratingElement.appendChild(star);
      }
  
      app.appendChild(card);
    });
  
    cardTemplate.style.display = 'none';
  
    let startX, currentCard;
    const threshold = 100;
  
    app.addEventListener('mousedown', (e) => {
      currentCard = e.target.closest('.card');
      if (currentCard) {
        startX = e.clientX;
        currentCard.classList.add('dragging');
        document.addEventListener('mousemove', handleMouseMove);
        document.addEventListener('mouseup', handleMouseUp);
      }
    });
  
    async function sendOutfitStatus(outfit, status) {
      const url = `http://localhost:3000/api/${status}`;
      await fetch(url, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(outfit),
      });
    }
  
    function storeOutfitStatus(outfit, status) {
      const storedOutfits = JSON.parse(localStorage.getItem(status)) || [];
      storedOutfits.push(outfit);
      localStorage.setItem(status, JSON.stringify(storedOutfits));
    }
  
    function handleMouseMove(e) {
      if (!currentCard) return;
      const diffX = e.clientX - startX;
      currentCard.style.transform = `translateX(${diffX}px) rotate(${diffX * 0.05}deg)`;
  
      if (diffX > 0) {
        likeButton.style.transform = 'scale(1.5)';
        dislikeButton.style.transform = 'scale(1)';
      } else {
        dislikeButton.style.transform = 'scale(1.5)';
        likeButton.style.transform = 'scale(1)';
      }
    }
  
    function handleMouseUp(e) {
      if (!currentCard) return;
      const diffX = e.clientX - startX;
      const outfitId = currentCard.querySelector('.item-id').textContent.split(': ')[1];
  
      if (Math.abs(diffX) > threshold) {
        const outfitData = {
          id: outfitId,
          description: currentCard.querySelector('.description').textContent,
        };
  
        if (diffX > 0) {
          sendOutfitStatus(outfitData, 'like');
          storeOutfitStatus(outfitData, 'likedOutfits');
        } else {
          sendOutfitStatus(outfitData, 'dislike');
          storeOutfitStatus(outfitData, 'dislikedOutfits');
        }
  
        currentCard.style.transition = 'transform 0.5s ease-in-out, opacity 0.5s ease-in-out';
        currentCard.style.transform = `translateX(${diffX > 0 ? '500px' : '-500px'}) rotate(${diffX * 0.05}deg)`;
        currentCard.style.opacity = '0';
        setTimeout(() => {
          currentCard.remove();
        }, 1000);
      } else {
        currentCard.style.transform = 'translateX(0) rotate(0)';
      }
  
      currentCard.classList.remove('dragging');
      document.removeEventListener('mousemove', handleMouseMove);
      document.removeEventListener('mouseup', handleMouseUp);
      currentCard = null;
  
      likeButton.style.transform = 'scale(1)';
      dislikeButton.style.transform = 'scale(1)';
    }
  
    const likeButton = document.getElementById('like-button');
    const dislikeButton = document.getElementById('dislike-button');
  });

<--resuts.html-->
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Outfit Results</title>
  <link rel="stylesheet" href="styles.css">
  <style>
    body {
      display: flex;
      flex-direction: column;
      align-items: center;
      margin: 20px;
    }
    table {
      border-collapse: collapse;
      width: 80%;
      margin: 10px 0;
      border: 1px solid #ccc;
    }
    th, td {
      border: 1px solid #ccc;
      padding: 8px;
      text-align: center;
    }
    th {
      background-color: #f2f2f2;
      font-weight: bold;
    }
    h2 {
      margin-bottom: 20px;
    }
  </style>
</head>
<body>
  <h2>Liked Outfits</h2>
  <table>
    <thead>
      <tr>
        <th>Outfit Name</th>
        <th>Item ID</th>
      </tr>
    </thead>
    <tbody id="liked-outfits">
      <!-- Liked outfits will be populated here -->
    </tbody>
  </table>

  <h2>Disliked Outfits</h2>
  <table>
    <thead>
      <tr>
        <th>Outfit Name</th>
        <th>Item ID</th>
      </tr>
    </thead>
    <tbody id="disliked-outfits">
      <!-- Disliked outfits will be populated here -->
    </tbody>
  </table>

  <button id="reset-button">Reset Data</button>

  <script>
    function populateOutfits() {
      const likedOutfits = JSON.parse(localStorage.getItem('likedOutfits')) || [];
      const dislikedOutfits = JSON.parse(localStorage.getItem('dislikedOutfits')) || [];

      const likedTable = document.getElementById('liked-outfits');
      const dislikedTable = document.getElementById('disliked-outfits');

      likedOutfits.forEach(outfit => {
        const row = likedTable.insertRow();
        row.insertCell(0).textContent = outfit.description;
        row.insertCell(1).textContent = outfit.id;
      });

      dislikedOutfits.forEach(outfit => {
        const row = dislikedTable.insertRow();
        row.insertCell(0).textContent = outfit.description;
        row.insertCell(1).textContent = outfit.id;
      });
    }

    function resetData() {
      localStorage.removeItem('likedOutfits');
      localStorage.removeItem('dislikedOutfits');
      window.location.reload();
    }

    document.getElementById('reset-button').addEventListener('click', resetData);

    populateOutfits();
  </script>
</body>
</html>